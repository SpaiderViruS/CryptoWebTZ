import os
import logging
import psycopg2
from urllib.parse import urlparse
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
from telegram.constants import ParseMode

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
parsed_url = urlparse(os.getenv("DATABASE_URL"))
DB_CONFIG = {
    "dbname": parsed_url.path[1:],
    "user": parsed_url.username,
    "password": parsed_url.password,
    "host": parsed_url.hostname,
    "port": parsed_url.port
}

# –°–æ–∑–¥–∞–µ–º FastAPI –∏ Telegram App
app = FastAPI()
telegram_app: Application = ApplicationBuilder().token(TOKEN).build()

@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    await telegram_app.initialize()
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("stop", stop))
    await telegram_app.bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
    logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    username = update.effective_user.username or "unknown"

    logger.info(f"üì© –ü–æ–¥–ø–∏—Å–∫–∞: {chat_id} / {username}")
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO notification_contacts (telegram_account, username, is_active)
            VALUES (%s, %s, true)
            ON CONFLICT (telegram_account) DO UPDATE SET is_active = true;
        """, (chat_id, username))
        conn.commit()
        cur.close()
        conn.close()

        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    logger.info(f"üõë –û—Ç–ø–∏—Å–∫–∞: {chat_id}")

    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        cur.execute("UPDATE notification_contacts SET is_active = false WHERE telegram_account = %s", (chat_id,))
        conn.commit()
        cur.close()
        conn.close()

        await context.bot.send_message(chat_id=chat_id, text="üìç –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏.")

# Webhook-–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.post("/webhook")
async def webhook_handler(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"status": "ok"}

# –†—É—á–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@app.post("/send")
async def send_notifications(request: Request):
    data = await request.json()
    msg = f"""
üì• *–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ–±–º–µ–Ω–∞*

üí± {data['sell_currency']} ‚Üí {data['buy_currency']}
üí∏ –ü—Ä–æ–¥–∞–∂–∞: {data['sell_amount']} {data['sell_currency']}
üí∞ –ü–æ–∫—É–ø–∫–∞: {data['buy_amount']} {data['buy_currency']}

üîê –ö–æ—à–µ–ª–µ–∫: `{data['wallet_address']}`
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
"""

    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        cur.execute("SELECT telegram_account FROM notification_contacts WHERE is_active = true")
        rows = cur.fetchall()
        cur.close()
        conn.close()

        for (chat_id,) in rows:
            try:
                await telegram_app.bot.send_message(chat_id=chat_id, text=msg, parse_mode=ParseMode.MARKDOWN)
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")

        return {"status": "ok", "sent": len(rows)}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        return {"error": str(e)}
