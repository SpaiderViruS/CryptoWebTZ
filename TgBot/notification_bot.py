import os
import asyncio
import threading
import time
import psycopg2
from urllib.parse import urlparse
from dotenv import load_dotenv
from flask import Flask, request, jsonify
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.constants import ParseMode

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# Telegram –∫–æ–Ω—Ñ–∏–≥
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TELEGRAM_TOKEN)

# PostgreSQL –∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ DATABASE_URL
DATABASE_URL = os.getenv("DATABASE_URL")
parsed_url = urlparse(DATABASE_URL)
DB_CONFIG = {
    "dbname": parsed_url.path[1:],
    "user": parsed_url.username,
    "password": parsed_url.password,
    "host": parsed_url.hostname,
    "port": parsed_url.port
}

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app = Flask(__name__)

@app.route("/send", methods=["POST"])
def notify_all_contacts():
    data = request.json

    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_account FROM notification_contacts WHERE telegram_account IS NOT NULL")
        rows = cursor.fetchall()

        if not rows:
            return jsonify({"error": "–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"}), 404

        text = f"""
üì• *–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ–±–º–µ–Ω–∞*

üí± –í–∞–ª—é—Ç–∞: {data['sell_currency']} ‚Üí {data['buy_currency']}
üí∏ –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: {data['sell_amount']} {data['sell_currency']}
üí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {data['buy_amount']} {data['buy_currency']}

üîê –ö–æ—à–µ–ª–µ–∫: `{data['wallet_address']}`
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
        """.strip()

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        for (chat_id,) in rows:
            try:
                loop.run_until_complete(bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN))
            except Exception as send_err:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {chat_id}: {send_err}")
                if "Timed out" in str(send_err) or "Forbidden" in str(send_err):
                    try:
                        cursor.execute("UPDATE notification_contacts SET is_active = false WHERE telegram_account = %s", (chat_id,))
                        conn.commit()
                    except Exception as db_err:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –¥–ª—è {chat_id}: {db_err}")
            finally:
                time.sleep(0.3)

        loop.close()
        cursor.close()
        conn.close()
        return jsonify({"status": "ok", "recipients": len(rows)}), 200

    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ"}), 500

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = str(update.effective_chat.id)
    username = user.username or "no_username"

    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO notification_contacts (telegram_account, username, is_active)
            VALUES (%s, %s, true)
            ON CONFLICT (telegram_account) DO UPDATE SET is_active = true;
        """, (chat_id, username))

        conn.commit()
        cursor.close()
        conn.close()

        await update.message.reply_text(
            "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
            "–í–∞—à Telegram ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /stop."
        )

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ë–î:", e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("UPDATE notification_contacts SET is_active = false WHERE telegram_account = %s", (chat_id,))
        conn.commit()
        cursor.close()
        conn.close()
        await update.message.reply_text("üìç –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ë–î:", e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ")

# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
if __name__ == "__main__":
    flask_thread = threading.Thread(target=lambda: app.run(port=5005, use_reloader=False))
    flask_thread.start()

    app_bot = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CommandHandler("stop", stop))
    app_bot.run_polling()
